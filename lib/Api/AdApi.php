<?php
/**
 * AdApi
 * PHP version 5
 *
 * @category Class
 * @package  EbayMarketingApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Marketing API
 *
 * <p>The <i>Marketing API </i> offers two platforms that sellers can use to promote and advertise their products:</p> <ul><li><b>Promoted Listings</b> is an eBay ad service that lets sellers set up <i>ad campaigns </i> for the products they want to promote. eBay displays the ads in search results and in other marketing modules as <b>SPONSORED</b> listings. If an item in a Promoted Listings campaign sells, the seller is assessed a Promoted Listings fee, which is a seller-specified percentage applied to the sales price. For complete details, see <a href=\"/api-docs/sell/static/marketing/promoted-listings.html\">Promoted Listings</a>.</li>  <li><b>Promotions Manager</b> gives sellers a way to offer discounts on specific items as a way to attract buyers to their inventory. Sellers can set up discounts (such as \"20% off\" and other types of offers) on specific items or on an entire customer order. To further attract buyers, eBay prominently displays promotion <i>teasers</i> throughout buyer flows. For complete details, see <a href=\"/api-docs/sell/static/marketing/promotions-manager.html\">Promotions Manager</a>.</li></ul>  <p><b>Marketing reports</b>, on both the Promoted Listings and Promotions Manager platforms, give sellers information that shows the effectiveness of their marketing strategies. The data gives sellers the ability to review and fine tune their marketing efforts.</p> <p class=\"tablenote\"><b>Important!</b> Sellers must have an active eBay Store subscription, and they must accept the <b>Terms and Conditions</b> before they can make requests to these APIs in the Production environment. There are also site-specific listings requirements and restrictions associated with these marketing tools, as listed in the \"requirements and restrictions\" sections for <a href=\"/api-docs/sell/marketing/static/overview.html#PL-requirements\">Promoted Listings</a> and <a href=\"/api-docs/sell/marketing/static/overview.html#PM-requirements\">Promotions Manager</a>.</p> <p>The table below lists all the Marketing API calls grouped by resource.</p>
 *
 * The version of the OpenAPI document: v1.7.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EbayMarketingApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use EbayMarketingApi\ApiException;
use EbayMarketingApi\Configuration;
use EbayMarketingApi\HeaderSelector;
use EbayMarketingApi\ObjectSerializer;

/**
 * AdApi Class Doc Comment
 *
 * @category Class
 * @package  EbayMarketingApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AdApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation bulkCreateAdsByInventoryReference
     *
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     * @param  \EbayMarketingApi\Model\BulkCreateAdsByInventoryReferenceRequest $bulk_create_ads_by_inventory_reference_request This type defines the fields for the bulkCreateAdsByInventoryReference request. (required)
     *
     * @throws \EbayMarketingApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EbayMarketingApi\Model\BulkCreateAdsByInventoryReferenceResponse
     */
    public function bulkCreateAdsByInventoryReference($campaign_id, $bulk_create_ads_by_inventory_reference_request)
    {
        list($response) = $this->bulkCreateAdsByInventoryReferenceWithHttpInfo($campaign_id, $bulk_create_ads_by_inventory_reference_request);
        return $response;
    }

    /**
     * Operation bulkCreateAdsByInventoryReferenceWithHttpInfo
     *
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     * @param  \EbayMarketingApi\Model\BulkCreateAdsByInventoryReferenceRequest $bulk_create_ads_by_inventory_reference_request This type defines the fields for the bulkCreateAdsByInventoryReference request. (required)
     *
     * @throws \EbayMarketingApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EbayMarketingApi\Model\BulkCreateAdsByInventoryReferenceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function bulkCreateAdsByInventoryReferenceWithHttpInfo($campaign_id, $bulk_create_ads_by_inventory_reference_request)
    {
        $request = $this->bulkCreateAdsByInventoryReferenceRequest($campaign_id, $bulk_create_ads_by_inventory_reference_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\EbayMarketingApi\Model\BulkCreateAdsByInventoryReferenceResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EbayMarketingApi\Model\BulkCreateAdsByInventoryReferenceResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\EbayMarketingApi\Model\BulkCreateAdsByInventoryReferenceResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EbayMarketingApi\Model\BulkCreateAdsByInventoryReferenceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bulkCreateAdsByInventoryReferenceAsync
     *
     * 
     *
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     * @param  \EbayMarketingApi\Model\BulkCreateAdsByInventoryReferenceRequest $bulk_create_ads_by_inventory_reference_request This type defines the fields for the bulkCreateAdsByInventoryReference request. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkCreateAdsByInventoryReferenceAsync($campaign_id, $bulk_create_ads_by_inventory_reference_request)
    {
        return $this->bulkCreateAdsByInventoryReferenceAsyncWithHttpInfo($campaign_id, $bulk_create_ads_by_inventory_reference_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bulkCreateAdsByInventoryReferenceAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     * @param  \EbayMarketingApi\Model\BulkCreateAdsByInventoryReferenceRequest $bulk_create_ads_by_inventory_reference_request This type defines the fields for the bulkCreateAdsByInventoryReference request. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkCreateAdsByInventoryReferenceAsyncWithHttpInfo($campaign_id, $bulk_create_ads_by_inventory_reference_request)
    {
        $returnType = '\EbayMarketingApi\Model\BulkCreateAdsByInventoryReferenceResponse';
        $request = $this->bulkCreateAdsByInventoryReferenceRequest($campaign_id, $bulk_create_ads_by_inventory_reference_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bulkCreateAdsByInventoryReference'
     *
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     * @param  \EbayMarketingApi\Model\BulkCreateAdsByInventoryReferenceRequest $bulk_create_ads_by_inventory_reference_request This type defines the fields for the bulkCreateAdsByInventoryReference request. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function bulkCreateAdsByInventoryReferenceRequest($campaign_id, $bulk_create_ads_by_inventory_reference_request)
    {
        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling bulkCreateAdsByInventoryReference'
            );
        }
        // verify the required parameter 'bulk_create_ads_by_inventory_reference_request' is set
        if ($bulk_create_ads_by_inventory_reference_request === null || (is_array($bulk_create_ads_by_inventory_reference_request) && count($bulk_create_ads_by_inventory_reference_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bulk_create_ads_by_inventory_reference_request when calling bulkCreateAdsByInventoryReference'
            );
        }

        $resourcePath = '/ad_campaign/{campaign_id}/bulk_create_ads_by_inventory_reference';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_id' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($bulk_create_ads_by_inventory_reference_request)) {
            $_tempBody = $bulk_create_ads_by_inventory_reference_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bulkCreateAdsByListingId
     *
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     * @param  \EbayMarketingApi\Model\BulkCreateAdRequest $bulk_create_ad_request The container for the bulk request to create ads for eBay listing IDs. eBay listing IDs are generated when the listing is created on eBay. Note: This request accepts both listing IDs, as generated by the Inventory API, and an item IDs, as used in the eBay Traditional API set (e.g., the Trading and Finding APIs). (required)
     *
     * @throws \EbayMarketingApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EbayMarketingApi\Model\BulkAdResponse
     */
    public function bulkCreateAdsByListingId($campaign_id, $bulk_create_ad_request)
    {
        list($response) = $this->bulkCreateAdsByListingIdWithHttpInfo($campaign_id, $bulk_create_ad_request);
        return $response;
    }

    /**
     * Operation bulkCreateAdsByListingIdWithHttpInfo
     *
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     * @param  \EbayMarketingApi\Model\BulkCreateAdRequest $bulk_create_ad_request The container for the bulk request to create ads for eBay listing IDs. eBay listing IDs are generated when the listing is created on eBay. Note: This request accepts both listing IDs, as generated by the Inventory API, and an item IDs, as used in the eBay Traditional API set (e.g., the Trading and Finding APIs). (required)
     *
     * @throws \EbayMarketingApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EbayMarketingApi\Model\BulkAdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function bulkCreateAdsByListingIdWithHttpInfo($campaign_id, $bulk_create_ad_request)
    {
        $request = $this->bulkCreateAdsByListingIdRequest($campaign_id, $bulk_create_ad_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\EbayMarketingApi\Model\BulkAdResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EbayMarketingApi\Model\BulkAdResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\EbayMarketingApi\Model\BulkAdResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EbayMarketingApi\Model\BulkAdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bulkCreateAdsByListingIdAsync
     *
     * 
     *
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     * @param  \EbayMarketingApi\Model\BulkCreateAdRequest $bulk_create_ad_request The container for the bulk request to create ads for eBay listing IDs. eBay listing IDs are generated when the listing is created on eBay. Note: This request accepts both listing IDs, as generated by the Inventory API, and an item IDs, as used in the eBay Traditional API set (e.g., the Trading and Finding APIs). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkCreateAdsByListingIdAsync($campaign_id, $bulk_create_ad_request)
    {
        return $this->bulkCreateAdsByListingIdAsyncWithHttpInfo($campaign_id, $bulk_create_ad_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bulkCreateAdsByListingIdAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     * @param  \EbayMarketingApi\Model\BulkCreateAdRequest $bulk_create_ad_request The container for the bulk request to create ads for eBay listing IDs. eBay listing IDs are generated when the listing is created on eBay. Note: This request accepts both listing IDs, as generated by the Inventory API, and an item IDs, as used in the eBay Traditional API set (e.g., the Trading and Finding APIs). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkCreateAdsByListingIdAsyncWithHttpInfo($campaign_id, $bulk_create_ad_request)
    {
        $returnType = '\EbayMarketingApi\Model\BulkAdResponse';
        $request = $this->bulkCreateAdsByListingIdRequest($campaign_id, $bulk_create_ad_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bulkCreateAdsByListingId'
     *
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     * @param  \EbayMarketingApi\Model\BulkCreateAdRequest $bulk_create_ad_request The container for the bulk request to create ads for eBay listing IDs. eBay listing IDs are generated when the listing is created on eBay. Note: This request accepts both listing IDs, as generated by the Inventory API, and an item IDs, as used in the eBay Traditional API set (e.g., the Trading and Finding APIs). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function bulkCreateAdsByListingIdRequest($campaign_id, $bulk_create_ad_request)
    {
        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling bulkCreateAdsByListingId'
            );
        }
        // verify the required parameter 'bulk_create_ad_request' is set
        if ($bulk_create_ad_request === null || (is_array($bulk_create_ad_request) && count($bulk_create_ad_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bulk_create_ad_request when calling bulkCreateAdsByListingId'
            );
        }

        $resourcePath = '/ad_campaign/{campaign_id}/bulk_create_ads_by_listing_id';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_id' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($bulk_create_ad_request)) {
            $_tempBody = $bulk_create_ad_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bulkDeleteAdsByInventoryReference
     *
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     * @param  \EbayMarketingApi\Model\BulkDeleteAdsByInventoryReferenceRequest $bulk_delete_ads_by_inventory_reference_request This type defines the fields for a bulkDeleteAdsByInventoryReference request. (required)
     *
     * @throws \EbayMarketingApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EbayMarketingApi\Model\BulkDeleteAdsByInventoryReferenceResponse
     */
    public function bulkDeleteAdsByInventoryReference($campaign_id, $bulk_delete_ads_by_inventory_reference_request)
    {
        list($response) = $this->bulkDeleteAdsByInventoryReferenceWithHttpInfo($campaign_id, $bulk_delete_ads_by_inventory_reference_request);
        return $response;
    }

    /**
     * Operation bulkDeleteAdsByInventoryReferenceWithHttpInfo
     *
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     * @param  \EbayMarketingApi\Model\BulkDeleteAdsByInventoryReferenceRequest $bulk_delete_ads_by_inventory_reference_request This type defines the fields for a bulkDeleteAdsByInventoryReference request. (required)
     *
     * @throws \EbayMarketingApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EbayMarketingApi\Model\BulkDeleteAdsByInventoryReferenceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function bulkDeleteAdsByInventoryReferenceWithHttpInfo($campaign_id, $bulk_delete_ads_by_inventory_reference_request)
    {
        $request = $this->bulkDeleteAdsByInventoryReferenceRequest($campaign_id, $bulk_delete_ads_by_inventory_reference_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\EbayMarketingApi\Model\BulkDeleteAdsByInventoryReferenceResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EbayMarketingApi\Model\BulkDeleteAdsByInventoryReferenceResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\EbayMarketingApi\Model\BulkDeleteAdsByInventoryReferenceResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EbayMarketingApi\Model\BulkDeleteAdsByInventoryReferenceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bulkDeleteAdsByInventoryReferenceAsync
     *
     * 
     *
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     * @param  \EbayMarketingApi\Model\BulkDeleteAdsByInventoryReferenceRequest $bulk_delete_ads_by_inventory_reference_request This type defines the fields for a bulkDeleteAdsByInventoryReference request. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkDeleteAdsByInventoryReferenceAsync($campaign_id, $bulk_delete_ads_by_inventory_reference_request)
    {
        return $this->bulkDeleteAdsByInventoryReferenceAsyncWithHttpInfo($campaign_id, $bulk_delete_ads_by_inventory_reference_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bulkDeleteAdsByInventoryReferenceAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     * @param  \EbayMarketingApi\Model\BulkDeleteAdsByInventoryReferenceRequest $bulk_delete_ads_by_inventory_reference_request This type defines the fields for a bulkDeleteAdsByInventoryReference request. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkDeleteAdsByInventoryReferenceAsyncWithHttpInfo($campaign_id, $bulk_delete_ads_by_inventory_reference_request)
    {
        $returnType = '\EbayMarketingApi\Model\BulkDeleteAdsByInventoryReferenceResponse';
        $request = $this->bulkDeleteAdsByInventoryReferenceRequest($campaign_id, $bulk_delete_ads_by_inventory_reference_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bulkDeleteAdsByInventoryReference'
     *
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     * @param  \EbayMarketingApi\Model\BulkDeleteAdsByInventoryReferenceRequest $bulk_delete_ads_by_inventory_reference_request This type defines the fields for a bulkDeleteAdsByInventoryReference request. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function bulkDeleteAdsByInventoryReferenceRequest($campaign_id, $bulk_delete_ads_by_inventory_reference_request)
    {
        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling bulkDeleteAdsByInventoryReference'
            );
        }
        // verify the required parameter 'bulk_delete_ads_by_inventory_reference_request' is set
        if ($bulk_delete_ads_by_inventory_reference_request === null || (is_array($bulk_delete_ads_by_inventory_reference_request) && count($bulk_delete_ads_by_inventory_reference_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bulk_delete_ads_by_inventory_reference_request when calling bulkDeleteAdsByInventoryReference'
            );
        }

        $resourcePath = '/ad_campaign/{campaign_id}/bulk_delete_ads_by_inventory_reference';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_id' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($bulk_delete_ads_by_inventory_reference_request)) {
            $_tempBody = $bulk_delete_ads_by_inventory_reference_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bulkDeleteAdsByListingId
     *
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     * @param  \EbayMarketingApi\Model\BulkDeleteAdRequest $bulk_delete_ad_request This type defines the fields for the bulkDeleteAdsByListingId request. (required)
     *
     * @throws \EbayMarketingApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EbayMarketingApi\Model\BulkDeleteAdResponse
     */
    public function bulkDeleteAdsByListingId($campaign_id, $bulk_delete_ad_request)
    {
        list($response) = $this->bulkDeleteAdsByListingIdWithHttpInfo($campaign_id, $bulk_delete_ad_request);
        return $response;
    }

    /**
     * Operation bulkDeleteAdsByListingIdWithHttpInfo
     *
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     * @param  \EbayMarketingApi\Model\BulkDeleteAdRequest $bulk_delete_ad_request This type defines the fields for the bulkDeleteAdsByListingId request. (required)
     *
     * @throws \EbayMarketingApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EbayMarketingApi\Model\BulkDeleteAdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function bulkDeleteAdsByListingIdWithHttpInfo($campaign_id, $bulk_delete_ad_request)
    {
        $request = $this->bulkDeleteAdsByListingIdRequest($campaign_id, $bulk_delete_ad_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\EbayMarketingApi\Model\BulkDeleteAdResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EbayMarketingApi\Model\BulkDeleteAdResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\EbayMarketingApi\Model\BulkDeleteAdResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EbayMarketingApi\Model\BulkDeleteAdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bulkDeleteAdsByListingIdAsync
     *
     * 
     *
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     * @param  \EbayMarketingApi\Model\BulkDeleteAdRequest $bulk_delete_ad_request This type defines the fields for the bulkDeleteAdsByListingId request. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkDeleteAdsByListingIdAsync($campaign_id, $bulk_delete_ad_request)
    {
        return $this->bulkDeleteAdsByListingIdAsyncWithHttpInfo($campaign_id, $bulk_delete_ad_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bulkDeleteAdsByListingIdAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     * @param  \EbayMarketingApi\Model\BulkDeleteAdRequest $bulk_delete_ad_request This type defines the fields for the bulkDeleteAdsByListingId request. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkDeleteAdsByListingIdAsyncWithHttpInfo($campaign_id, $bulk_delete_ad_request)
    {
        $returnType = '\EbayMarketingApi\Model\BulkDeleteAdResponse';
        $request = $this->bulkDeleteAdsByListingIdRequest($campaign_id, $bulk_delete_ad_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bulkDeleteAdsByListingId'
     *
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     * @param  \EbayMarketingApi\Model\BulkDeleteAdRequest $bulk_delete_ad_request This type defines the fields for the bulkDeleteAdsByListingId request. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function bulkDeleteAdsByListingIdRequest($campaign_id, $bulk_delete_ad_request)
    {
        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling bulkDeleteAdsByListingId'
            );
        }
        // verify the required parameter 'bulk_delete_ad_request' is set
        if ($bulk_delete_ad_request === null || (is_array($bulk_delete_ad_request) && count($bulk_delete_ad_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bulk_delete_ad_request when calling bulkDeleteAdsByListingId'
            );
        }

        $resourcePath = '/ad_campaign/{campaign_id}/bulk_delete_ads_by_listing_id';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_id' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($bulk_delete_ad_request)) {
            $_tempBody = $bulk_delete_ad_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bulkUpdateAdsBidByInventoryReference
     *
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     * @param  \EbayMarketingApi\Model\BulkCreateAdsByInventoryReferenceRequest $bulk_create_ads_by_inventory_reference_request This type defines the fields for the BulkCreateAdsByInventoryReference request. (required)
     *
     * @throws \EbayMarketingApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EbayMarketingApi\Model\BulkCreateAdsByInventoryReferenceResponse
     */
    public function bulkUpdateAdsBidByInventoryReference($campaign_id, $bulk_create_ads_by_inventory_reference_request)
    {
        list($response) = $this->bulkUpdateAdsBidByInventoryReferenceWithHttpInfo($campaign_id, $bulk_create_ads_by_inventory_reference_request);
        return $response;
    }

    /**
     * Operation bulkUpdateAdsBidByInventoryReferenceWithHttpInfo
     *
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     * @param  \EbayMarketingApi\Model\BulkCreateAdsByInventoryReferenceRequest $bulk_create_ads_by_inventory_reference_request This type defines the fields for the BulkCreateAdsByInventoryReference request. (required)
     *
     * @throws \EbayMarketingApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EbayMarketingApi\Model\BulkCreateAdsByInventoryReferenceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function bulkUpdateAdsBidByInventoryReferenceWithHttpInfo($campaign_id, $bulk_create_ads_by_inventory_reference_request)
    {
        $request = $this->bulkUpdateAdsBidByInventoryReferenceRequest($campaign_id, $bulk_create_ads_by_inventory_reference_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\EbayMarketingApi\Model\BulkCreateAdsByInventoryReferenceResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EbayMarketingApi\Model\BulkCreateAdsByInventoryReferenceResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\EbayMarketingApi\Model\BulkCreateAdsByInventoryReferenceResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EbayMarketingApi\Model\BulkCreateAdsByInventoryReferenceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bulkUpdateAdsBidByInventoryReferenceAsync
     *
     * 
     *
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     * @param  \EbayMarketingApi\Model\BulkCreateAdsByInventoryReferenceRequest $bulk_create_ads_by_inventory_reference_request This type defines the fields for the BulkCreateAdsByInventoryReference request. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkUpdateAdsBidByInventoryReferenceAsync($campaign_id, $bulk_create_ads_by_inventory_reference_request)
    {
        return $this->bulkUpdateAdsBidByInventoryReferenceAsyncWithHttpInfo($campaign_id, $bulk_create_ads_by_inventory_reference_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bulkUpdateAdsBidByInventoryReferenceAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     * @param  \EbayMarketingApi\Model\BulkCreateAdsByInventoryReferenceRequest $bulk_create_ads_by_inventory_reference_request This type defines the fields for the BulkCreateAdsByInventoryReference request. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkUpdateAdsBidByInventoryReferenceAsyncWithHttpInfo($campaign_id, $bulk_create_ads_by_inventory_reference_request)
    {
        $returnType = '\EbayMarketingApi\Model\BulkCreateAdsByInventoryReferenceResponse';
        $request = $this->bulkUpdateAdsBidByInventoryReferenceRequest($campaign_id, $bulk_create_ads_by_inventory_reference_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bulkUpdateAdsBidByInventoryReference'
     *
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     * @param  \EbayMarketingApi\Model\BulkCreateAdsByInventoryReferenceRequest $bulk_create_ads_by_inventory_reference_request This type defines the fields for the BulkCreateAdsByInventoryReference request. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function bulkUpdateAdsBidByInventoryReferenceRequest($campaign_id, $bulk_create_ads_by_inventory_reference_request)
    {
        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling bulkUpdateAdsBidByInventoryReference'
            );
        }
        // verify the required parameter 'bulk_create_ads_by_inventory_reference_request' is set
        if ($bulk_create_ads_by_inventory_reference_request === null || (is_array($bulk_create_ads_by_inventory_reference_request) && count($bulk_create_ads_by_inventory_reference_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bulk_create_ads_by_inventory_reference_request when calling bulkUpdateAdsBidByInventoryReference'
            );
        }

        $resourcePath = '/ad_campaign/{campaign_id}/bulk_update_ads_bid_by_inventory_reference';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_id' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($bulk_create_ads_by_inventory_reference_request)) {
            $_tempBody = $bulk_create_ads_by_inventory_reference_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bulkUpdateAdsBidByListingId
     *
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     * @param  \EbayMarketingApi\Model\BulkCreateAdRequest $bulk_create_ad_request Container for the bulk request to update ads. (required)
     *
     * @throws \EbayMarketingApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EbayMarketingApi\Model\BulkAdResponse
     */
    public function bulkUpdateAdsBidByListingId($campaign_id, $bulk_create_ad_request)
    {
        list($response) = $this->bulkUpdateAdsBidByListingIdWithHttpInfo($campaign_id, $bulk_create_ad_request);
        return $response;
    }

    /**
     * Operation bulkUpdateAdsBidByListingIdWithHttpInfo
     *
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     * @param  \EbayMarketingApi\Model\BulkCreateAdRequest $bulk_create_ad_request Container for the bulk request to update ads. (required)
     *
     * @throws \EbayMarketingApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EbayMarketingApi\Model\BulkAdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function bulkUpdateAdsBidByListingIdWithHttpInfo($campaign_id, $bulk_create_ad_request)
    {
        $request = $this->bulkUpdateAdsBidByListingIdRequest($campaign_id, $bulk_create_ad_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\EbayMarketingApi\Model\BulkAdResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EbayMarketingApi\Model\BulkAdResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\EbayMarketingApi\Model\BulkAdResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EbayMarketingApi\Model\BulkAdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bulkUpdateAdsBidByListingIdAsync
     *
     * 
     *
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     * @param  \EbayMarketingApi\Model\BulkCreateAdRequest $bulk_create_ad_request Container for the bulk request to update ads. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkUpdateAdsBidByListingIdAsync($campaign_id, $bulk_create_ad_request)
    {
        return $this->bulkUpdateAdsBidByListingIdAsyncWithHttpInfo($campaign_id, $bulk_create_ad_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bulkUpdateAdsBidByListingIdAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     * @param  \EbayMarketingApi\Model\BulkCreateAdRequest $bulk_create_ad_request Container for the bulk request to update ads. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkUpdateAdsBidByListingIdAsyncWithHttpInfo($campaign_id, $bulk_create_ad_request)
    {
        $returnType = '\EbayMarketingApi\Model\BulkAdResponse';
        $request = $this->bulkUpdateAdsBidByListingIdRequest($campaign_id, $bulk_create_ad_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bulkUpdateAdsBidByListingId'
     *
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     * @param  \EbayMarketingApi\Model\BulkCreateAdRequest $bulk_create_ad_request Container for the bulk request to update ads. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function bulkUpdateAdsBidByListingIdRequest($campaign_id, $bulk_create_ad_request)
    {
        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling bulkUpdateAdsBidByListingId'
            );
        }
        // verify the required parameter 'bulk_create_ad_request' is set
        if ($bulk_create_ad_request === null || (is_array($bulk_create_ad_request) && count($bulk_create_ad_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bulk_create_ad_request when calling bulkUpdateAdsBidByListingId'
            );
        }

        $resourcePath = '/ad_campaign/{campaign_id}/bulk_update_ads_bid_by_listing_id';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_id' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($bulk_create_ad_request)) {
            $_tempBody = $bulk_create_ad_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createAdByListingId
     *
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     * @param  \EbayMarketingApi\Model\CreateAdRequest $create_ad_request This type defines the fields for the createAd request. (required)
     *
     * @throws \EbayMarketingApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function createAdByListingId($campaign_id, $create_ad_request)
    {
        list($response) = $this->createAdByListingIdWithHttpInfo($campaign_id, $create_ad_request);
        return $response;
    }

    /**
     * Operation createAdByListingIdWithHttpInfo
     *
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     * @param  \EbayMarketingApi\Model\CreateAdRequest $create_ad_request This type defines the fields for the createAd request. (required)
     *
     * @throws \EbayMarketingApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAdByListingIdWithHttpInfo($campaign_id, $create_ad_request)
    {
        $request = $this->createAdByListingIdRequest($campaign_id, $create_ad_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('object' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAdByListingIdAsync
     *
     * 
     *
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     * @param  \EbayMarketingApi\Model\CreateAdRequest $create_ad_request This type defines the fields for the createAd request. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAdByListingIdAsync($campaign_id, $create_ad_request)
    {
        return $this->createAdByListingIdAsyncWithHttpInfo($campaign_id, $create_ad_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAdByListingIdAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     * @param  \EbayMarketingApi\Model\CreateAdRequest $create_ad_request This type defines the fields for the createAd request. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAdByListingIdAsyncWithHttpInfo($campaign_id, $create_ad_request)
    {
        $returnType = 'object';
        $request = $this->createAdByListingIdRequest($campaign_id, $create_ad_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAdByListingId'
     *
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     * @param  \EbayMarketingApi\Model\CreateAdRequest $create_ad_request This type defines the fields for the createAd request. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createAdByListingIdRequest($campaign_id, $create_ad_request)
    {
        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling createAdByListingId'
            );
        }
        // verify the required parameter 'create_ad_request' is set
        if ($create_ad_request === null || (is_array($create_ad_request) && count($create_ad_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_ad_request when calling createAdByListingId'
            );
        }

        $resourcePath = '/ad_campaign/{campaign_id}/ad';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_id' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($create_ad_request)) {
            $_tempBody = $create_ad_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createAdsByInventoryReference
     *
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     * @param  \EbayMarketingApi\Model\CreateAdsByInventoryReferenceRequest $create_ads_by_inventory_reference_request This type defines the fields for the createAdsByInventoryReference request. (required)
     *
     * @throws \EbayMarketingApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EbayMarketingApi\Model\AdReferences
     */
    public function createAdsByInventoryReference($campaign_id, $create_ads_by_inventory_reference_request)
    {
        list($response) = $this->createAdsByInventoryReferenceWithHttpInfo($campaign_id, $create_ads_by_inventory_reference_request);
        return $response;
    }

    /**
     * Operation createAdsByInventoryReferenceWithHttpInfo
     *
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     * @param  \EbayMarketingApi\Model\CreateAdsByInventoryReferenceRequest $create_ads_by_inventory_reference_request This type defines the fields for the createAdsByInventoryReference request. (required)
     *
     * @throws \EbayMarketingApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EbayMarketingApi\Model\AdReferences, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAdsByInventoryReferenceWithHttpInfo($campaign_id, $create_ads_by_inventory_reference_request)
    {
        $request = $this->createAdsByInventoryReferenceRequest($campaign_id, $create_ads_by_inventory_reference_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('\EbayMarketingApi\Model\AdReferences' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EbayMarketingApi\Model\AdReferences', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\EbayMarketingApi\Model\AdReferences';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EbayMarketingApi\Model\AdReferences',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAdsByInventoryReferenceAsync
     *
     * 
     *
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     * @param  \EbayMarketingApi\Model\CreateAdsByInventoryReferenceRequest $create_ads_by_inventory_reference_request This type defines the fields for the createAdsByInventoryReference request. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAdsByInventoryReferenceAsync($campaign_id, $create_ads_by_inventory_reference_request)
    {
        return $this->createAdsByInventoryReferenceAsyncWithHttpInfo($campaign_id, $create_ads_by_inventory_reference_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAdsByInventoryReferenceAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     * @param  \EbayMarketingApi\Model\CreateAdsByInventoryReferenceRequest $create_ads_by_inventory_reference_request This type defines the fields for the createAdsByInventoryReference request. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAdsByInventoryReferenceAsyncWithHttpInfo($campaign_id, $create_ads_by_inventory_reference_request)
    {
        $returnType = '\EbayMarketingApi\Model\AdReferences';
        $request = $this->createAdsByInventoryReferenceRequest($campaign_id, $create_ads_by_inventory_reference_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAdsByInventoryReference'
     *
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     * @param  \EbayMarketingApi\Model\CreateAdsByInventoryReferenceRequest $create_ads_by_inventory_reference_request This type defines the fields for the createAdsByInventoryReference request. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createAdsByInventoryReferenceRequest($campaign_id, $create_ads_by_inventory_reference_request)
    {
        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling createAdsByInventoryReference'
            );
        }
        // verify the required parameter 'create_ads_by_inventory_reference_request' is set
        if ($create_ads_by_inventory_reference_request === null || (is_array($create_ads_by_inventory_reference_request) && count($create_ads_by_inventory_reference_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_ads_by_inventory_reference_request when calling createAdsByInventoryReference'
            );
        }

        $resourcePath = '/ad_campaign/{campaign_id}/create_ads_by_inventory_reference';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_id' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($create_ads_by_inventory_reference_request)) {
            $_tempBody = $create_ads_by_inventory_reference_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAd
     *
     * @param  string $ad_id Identifier of an ad. This ID was generated when the ad was created. (required)
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     *
     * @throws \EbayMarketingApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteAd($ad_id, $campaign_id)
    {
        $this->deleteAdWithHttpInfo($ad_id, $campaign_id);
    }

    /**
     * Operation deleteAdWithHttpInfo
     *
     * @param  string $ad_id Identifier of an ad. This ID was generated when the ad was created. (required)
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     *
     * @throws \EbayMarketingApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAdWithHttpInfo($ad_id, $campaign_id)
    {
        $request = $this->deleteAdRequest($ad_id, $campaign_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAdAsync
     *
     * 
     *
     * @param  string $ad_id Identifier of an ad. This ID was generated when the ad was created. (required)
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAdAsync($ad_id, $campaign_id)
    {
        return $this->deleteAdAsyncWithHttpInfo($ad_id, $campaign_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAdAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $ad_id Identifier of an ad. This ID was generated when the ad was created. (required)
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAdAsyncWithHttpInfo($ad_id, $campaign_id)
    {
        $returnType = '';
        $request = $this->deleteAdRequest($ad_id, $campaign_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAd'
     *
     * @param  string $ad_id Identifier of an ad. This ID was generated when the ad was created. (required)
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteAdRequest($ad_id, $campaign_id)
    {
        // verify the required parameter 'ad_id' is set
        if ($ad_id === null || (is_array($ad_id) && count($ad_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ad_id when calling deleteAd'
            );
        }
        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling deleteAd'
            );
        }

        $resourcePath = '/ad_campaign/{campaign_id}/ad/{ad_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ad_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ad_id' . '}',
                ObjectSerializer::toPathValue($ad_id),
                $resourcePath
            );
        }
        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_id' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAdsByInventoryReference
     *
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     * @param  \EbayMarketingApi\Model\DeleteAdsByInventoryReferenceRequest $delete_ads_by_inventory_reference_request This type defines the fields for the deleteAdsByInventoryReference request. (required)
     *
     * @throws \EbayMarketingApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EbayMarketingApi\Model\AdIds
     */
    public function deleteAdsByInventoryReference($campaign_id, $delete_ads_by_inventory_reference_request)
    {
        list($response) = $this->deleteAdsByInventoryReferenceWithHttpInfo($campaign_id, $delete_ads_by_inventory_reference_request);
        return $response;
    }

    /**
     * Operation deleteAdsByInventoryReferenceWithHttpInfo
     *
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     * @param  \EbayMarketingApi\Model\DeleteAdsByInventoryReferenceRequest $delete_ads_by_inventory_reference_request This type defines the fields for the deleteAdsByInventoryReference request. (required)
     *
     * @throws \EbayMarketingApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EbayMarketingApi\Model\AdIds, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAdsByInventoryReferenceWithHttpInfo($campaign_id, $delete_ads_by_inventory_reference_request)
    {
        $request = $this->deleteAdsByInventoryReferenceRequest($campaign_id, $delete_ads_by_inventory_reference_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\EbayMarketingApi\Model\AdIds' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EbayMarketingApi\Model\AdIds', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\EbayMarketingApi\Model\AdIds';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EbayMarketingApi\Model\AdIds',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAdsByInventoryReferenceAsync
     *
     * 
     *
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     * @param  \EbayMarketingApi\Model\DeleteAdsByInventoryReferenceRequest $delete_ads_by_inventory_reference_request This type defines the fields for the deleteAdsByInventoryReference request. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAdsByInventoryReferenceAsync($campaign_id, $delete_ads_by_inventory_reference_request)
    {
        return $this->deleteAdsByInventoryReferenceAsyncWithHttpInfo($campaign_id, $delete_ads_by_inventory_reference_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAdsByInventoryReferenceAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     * @param  \EbayMarketingApi\Model\DeleteAdsByInventoryReferenceRequest $delete_ads_by_inventory_reference_request This type defines the fields for the deleteAdsByInventoryReference request. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAdsByInventoryReferenceAsyncWithHttpInfo($campaign_id, $delete_ads_by_inventory_reference_request)
    {
        $returnType = '\EbayMarketingApi\Model\AdIds';
        $request = $this->deleteAdsByInventoryReferenceRequest($campaign_id, $delete_ads_by_inventory_reference_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAdsByInventoryReference'
     *
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     * @param  \EbayMarketingApi\Model\DeleteAdsByInventoryReferenceRequest $delete_ads_by_inventory_reference_request This type defines the fields for the deleteAdsByInventoryReference request. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteAdsByInventoryReferenceRequest($campaign_id, $delete_ads_by_inventory_reference_request)
    {
        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling deleteAdsByInventoryReference'
            );
        }
        // verify the required parameter 'delete_ads_by_inventory_reference_request' is set
        if ($delete_ads_by_inventory_reference_request === null || (is_array($delete_ads_by_inventory_reference_request) && count($delete_ads_by_inventory_reference_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delete_ads_by_inventory_reference_request when calling deleteAdsByInventoryReference'
            );
        }

        $resourcePath = '/ad_campaign/{campaign_id}/delete_ads_by_inventory_reference';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_id' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($delete_ads_by_inventory_reference_request)) {
            $_tempBody = $delete_ads_by_inventory_reference_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAd
     *
     * @param  string $ad_id Identifier of an ad. This ID was generated when the ad was created. (required)
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     *
     * @throws \EbayMarketingApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EbayMarketingApi\Model\Ad
     */
    public function getAd($ad_id, $campaign_id)
    {
        list($response) = $this->getAdWithHttpInfo($ad_id, $campaign_id);
        return $response;
    }

    /**
     * Operation getAdWithHttpInfo
     *
     * @param  string $ad_id Identifier of an ad. This ID was generated when the ad was created. (required)
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     *
     * @throws \EbayMarketingApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EbayMarketingApi\Model\Ad, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAdWithHttpInfo($ad_id, $campaign_id)
    {
        $request = $this->getAdRequest($ad_id, $campaign_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\EbayMarketingApi\Model\Ad' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EbayMarketingApi\Model\Ad', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\EbayMarketingApi\Model\Ad';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EbayMarketingApi\Model\Ad',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAdAsync
     *
     * 
     *
     * @param  string $ad_id Identifier of an ad. This ID was generated when the ad was created. (required)
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdAsync($ad_id, $campaign_id)
    {
        return $this->getAdAsyncWithHttpInfo($ad_id, $campaign_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAdAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $ad_id Identifier of an ad. This ID was generated when the ad was created. (required)
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdAsyncWithHttpInfo($ad_id, $campaign_id)
    {
        $returnType = '\EbayMarketingApi\Model\Ad';
        $request = $this->getAdRequest($ad_id, $campaign_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAd'
     *
     * @param  string $ad_id Identifier of an ad. This ID was generated when the ad was created. (required)
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAdRequest($ad_id, $campaign_id)
    {
        // verify the required parameter 'ad_id' is set
        if ($ad_id === null || (is_array($ad_id) && count($ad_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ad_id when calling getAd'
            );
        }
        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling getAd'
            );
        }

        $resourcePath = '/ad_campaign/{campaign_id}/ad/{ad_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ad_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ad_id' . '}',
                ObjectSerializer::toPathValue($ad_id),
                $resourcePath
            );
        }
        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_id' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAds
     *
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     * @param  string $listing_ids A comma separated list of eBay listing IDs. The response includes only active ads (ads associated with a RUNNING campaign). The results do not include listing IDs that are excluded by other conditions. Note: This field accepts both listing IDs, as generated by the Inventory API, and an item IDs, as used in the eBay Traditional API set (e.g., the Trading and Finding APIs). (required)
     * @param  string $limit Specifies the maximum number of ads to return on a page in the paginated response. Default: 10 Maximum: 500 (optional)
     * @param  string $offset Specifies the number of ads to skip in the result set before returning the first ad in the paginated response. Combine offset with the limit query parameter to control the items returned in the response. For example, if you supply an offset of 0 and a limit of 10, the first page of the response contains the first 10 items from the complete list of items retrieved by the call. If offset is 10 and limit is 20, the first page of the response contains items 11-30 from the complete result set. Default: 0 (optional)
     *
     * @throws \EbayMarketingApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EbayMarketingApi\Model\AdPagedCollection
     */
    public function getAds($campaign_id, $listing_ids, $limit = null, $offset = null)
    {
        list($response) = $this->getAdsWithHttpInfo($campaign_id, $listing_ids, $limit, $offset);
        return $response;
    }

    /**
     * Operation getAdsWithHttpInfo
     *
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     * @param  string $listing_ids A comma separated list of eBay listing IDs. The response includes only active ads (ads associated with a RUNNING campaign). The results do not include listing IDs that are excluded by other conditions. Note: This field accepts both listing IDs, as generated by the Inventory API, and an item IDs, as used in the eBay Traditional API set (e.g., the Trading and Finding APIs). (required)
     * @param  string $limit Specifies the maximum number of ads to return on a page in the paginated response. Default: 10 Maximum: 500 (optional)
     * @param  string $offset Specifies the number of ads to skip in the result set before returning the first ad in the paginated response. Combine offset with the limit query parameter to control the items returned in the response. For example, if you supply an offset of 0 and a limit of 10, the first page of the response contains the first 10 items from the complete list of items retrieved by the call. If offset is 10 and limit is 20, the first page of the response contains items 11-30 from the complete result set. Default: 0 (optional)
     *
     * @throws \EbayMarketingApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EbayMarketingApi\Model\AdPagedCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAdsWithHttpInfo($campaign_id, $listing_ids, $limit = null, $offset = null)
    {
        $request = $this->getAdsRequest($campaign_id, $listing_ids, $limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\EbayMarketingApi\Model\AdPagedCollection' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EbayMarketingApi\Model\AdPagedCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\EbayMarketingApi\Model\AdPagedCollection';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EbayMarketingApi\Model\AdPagedCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAdsAsync
     *
     * 
     *
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     * @param  string $listing_ids A comma separated list of eBay listing IDs. The response includes only active ads (ads associated with a RUNNING campaign). The results do not include listing IDs that are excluded by other conditions. Note: This field accepts both listing IDs, as generated by the Inventory API, and an item IDs, as used in the eBay Traditional API set (e.g., the Trading and Finding APIs). (required)
     * @param  string $limit Specifies the maximum number of ads to return on a page in the paginated response. Default: 10 Maximum: 500 (optional)
     * @param  string $offset Specifies the number of ads to skip in the result set before returning the first ad in the paginated response. Combine offset with the limit query parameter to control the items returned in the response. For example, if you supply an offset of 0 and a limit of 10, the first page of the response contains the first 10 items from the complete list of items retrieved by the call. If offset is 10 and limit is 20, the first page of the response contains items 11-30 from the complete result set. Default: 0 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdsAsync($campaign_id, $listing_ids, $limit = null, $offset = null)
    {
        return $this->getAdsAsyncWithHttpInfo($campaign_id, $listing_ids, $limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAdsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     * @param  string $listing_ids A comma separated list of eBay listing IDs. The response includes only active ads (ads associated with a RUNNING campaign). The results do not include listing IDs that are excluded by other conditions. Note: This field accepts both listing IDs, as generated by the Inventory API, and an item IDs, as used in the eBay Traditional API set (e.g., the Trading and Finding APIs). (required)
     * @param  string $limit Specifies the maximum number of ads to return on a page in the paginated response. Default: 10 Maximum: 500 (optional)
     * @param  string $offset Specifies the number of ads to skip in the result set before returning the first ad in the paginated response. Combine offset with the limit query parameter to control the items returned in the response. For example, if you supply an offset of 0 and a limit of 10, the first page of the response contains the first 10 items from the complete list of items retrieved by the call. If offset is 10 and limit is 20, the first page of the response contains items 11-30 from the complete result set. Default: 0 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdsAsyncWithHttpInfo($campaign_id, $listing_ids, $limit = null, $offset = null)
    {
        $returnType = '\EbayMarketingApi\Model\AdPagedCollection';
        $request = $this->getAdsRequest($campaign_id, $listing_ids, $limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAds'
     *
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     * @param  string $listing_ids A comma separated list of eBay listing IDs. The response includes only active ads (ads associated with a RUNNING campaign). The results do not include listing IDs that are excluded by other conditions. Note: This field accepts both listing IDs, as generated by the Inventory API, and an item IDs, as used in the eBay Traditional API set (e.g., the Trading and Finding APIs). (required)
     * @param  string $limit Specifies the maximum number of ads to return on a page in the paginated response. Default: 10 Maximum: 500 (optional)
     * @param  string $offset Specifies the number of ads to skip in the result set before returning the first ad in the paginated response. Combine offset with the limit query parameter to control the items returned in the response. For example, if you supply an offset of 0 and a limit of 10, the first page of the response contains the first 10 items from the complete list of items retrieved by the call. If offset is 10 and limit is 20, the first page of the response contains items 11-30 from the complete result set. Default: 0 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAdsRequest($campaign_id, $listing_ids, $limit = null, $offset = null)
    {
        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling getAds'
            );
        }
        // verify the required parameter 'listing_ids' is set
        if ($listing_ids === null || (is_array($listing_ids) && count($listing_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $listing_ids when calling getAds'
            );
        }

        $resourcePath = '/ad_campaign/{campaign_id}/ad';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($listing_ids !== null) {
            if('form' === 'form' && is_array($listing_ids)) {
                foreach($listing_ids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['listing_ids'] = $listing_ids;
            }
        }
        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }


        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_id' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAdsByInventoryReference
     *
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     * @param  string $inventory_reference_id The inventory reference ID associated with the ad you want returned. A seller&#39;s inventory reference ID is the ID of either a listing or the ID of an inventory item group (the parent of a multi-variation listing, such as a shirt that is available in multiple sizes and colors). You must always supply in both an inventory_reference_id and an inventory_reference_type. (required)
     * @param  string $inventory_reference_type The type of the inventory reference ID. Set this value to either INVENTORY_ITEM (a single listing) or INVENTORY_ITEM_GROUP (a multi-variation listing). You must always pass in both an inventory_reference_id and an inventory_reference_type. (required)
     *
     * @throws \EbayMarketingApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EbayMarketingApi\Model\Ads
     */
    public function getAdsByInventoryReference($campaign_id, $inventory_reference_id, $inventory_reference_type)
    {
        list($response) = $this->getAdsByInventoryReferenceWithHttpInfo($campaign_id, $inventory_reference_id, $inventory_reference_type);
        return $response;
    }

    /**
     * Operation getAdsByInventoryReferenceWithHttpInfo
     *
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     * @param  string $inventory_reference_id The inventory reference ID associated with the ad you want returned. A seller&#39;s inventory reference ID is the ID of either a listing or the ID of an inventory item group (the parent of a multi-variation listing, such as a shirt that is available in multiple sizes and colors). You must always supply in both an inventory_reference_id and an inventory_reference_type. (required)
     * @param  string $inventory_reference_type The type of the inventory reference ID. Set this value to either INVENTORY_ITEM (a single listing) or INVENTORY_ITEM_GROUP (a multi-variation listing). You must always pass in both an inventory_reference_id and an inventory_reference_type. (required)
     *
     * @throws \EbayMarketingApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EbayMarketingApi\Model\Ads, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAdsByInventoryReferenceWithHttpInfo($campaign_id, $inventory_reference_id, $inventory_reference_type)
    {
        $request = $this->getAdsByInventoryReferenceRequest($campaign_id, $inventory_reference_id, $inventory_reference_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\EbayMarketingApi\Model\Ads' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EbayMarketingApi\Model\Ads', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\EbayMarketingApi\Model\Ads';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EbayMarketingApi\Model\Ads',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAdsByInventoryReferenceAsync
     *
     * 
     *
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     * @param  string $inventory_reference_id The inventory reference ID associated with the ad you want returned. A seller&#39;s inventory reference ID is the ID of either a listing or the ID of an inventory item group (the parent of a multi-variation listing, such as a shirt that is available in multiple sizes and colors). You must always supply in both an inventory_reference_id and an inventory_reference_type. (required)
     * @param  string $inventory_reference_type The type of the inventory reference ID. Set this value to either INVENTORY_ITEM (a single listing) or INVENTORY_ITEM_GROUP (a multi-variation listing). You must always pass in both an inventory_reference_id and an inventory_reference_type. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdsByInventoryReferenceAsync($campaign_id, $inventory_reference_id, $inventory_reference_type)
    {
        return $this->getAdsByInventoryReferenceAsyncWithHttpInfo($campaign_id, $inventory_reference_id, $inventory_reference_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAdsByInventoryReferenceAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     * @param  string $inventory_reference_id The inventory reference ID associated with the ad you want returned. A seller&#39;s inventory reference ID is the ID of either a listing or the ID of an inventory item group (the parent of a multi-variation listing, such as a shirt that is available in multiple sizes and colors). You must always supply in both an inventory_reference_id and an inventory_reference_type. (required)
     * @param  string $inventory_reference_type The type of the inventory reference ID. Set this value to either INVENTORY_ITEM (a single listing) or INVENTORY_ITEM_GROUP (a multi-variation listing). You must always pass in both an inventory_reference_id and an inventory_reference_type. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdsByInventoryReferenceAsyncWithHttpInfo($campaign_id, $inventory_reference_id, $inventory_reference_type)
    {
        $returnType = '\EbayMarketingApi\Model\Ads';
        $request = $this->getAdsByInventoryReferenceRequest($campaign_id, $inventory_reference_id, $inventory_reference_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAdsByInventoryReference'
     *
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     * @param  string $inventory_reference_id The inventory reference ID associated with the ad you want returned. A seller&#39;s inventory reference ID is the ID of either a listing or the ID of an inventory item group (the parent of a multi-variation listing, such as a shirt that is available in multiple sizes and colors). You must always supply in both an inventory_reference_id and an inventory_reference_type. (required)
     * @param  string $inventory_reference_type The type of the inventory reference ID. Set this value to either INVENTORY_ITEM (a single listing) or INVENTORY_ITEM_GROUP (a multi-variation listing). You must always pass in both an inventory_reference_id and an inventory_reference_type. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAdsByInventoryReferenceRequest($campaign_id, $inventory_reference_id, $inventory_reference_type)
    {
        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling getAdsByInventoryReference'
            );
        }
        // verify the required parameter 'inventory_reference_id' is set
        if ($inventory_reference_id === null || (is_array($inventory_reference_id) && count($inventory_reference_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inventory_reference_id when calling getAdsByInventoryReference'
            );
        }
        // verify the required parameter 'inventory_reference_type' is set
        if ($inventory_reference_type === null || (is_array($inventory_reference_type) && count($inventory_reference_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inventory_reference_type when calling getAdsByInventoryReference'
            );
        }

        $resourcePath = '/ad_campaign/{campaign_id}/get_ads_by_inventory_reference';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($inventory_reference_id !== null) {
            if('form' === 'form' && is_array($inventory_reference_id)) {
                foreach($inventory_reference_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['inventory_reference_id'] = $inventory_reference_id;
            }
        }
        // query params
        if ($inventory_reference_type !== null) {
            if('form' === 'form' && is_array($inventory_reference_type)) {
                foreach($inventory_reference_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['inventory_reference_type'] = $inventory_reference_type;
            }
        }


        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_id' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateBid
     *
     * @param  string $ad_id A unique eBay-assigned ID for an ad that&#39;s generated when an ad is created. (required)
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     * @param  \EbayMarketingApi\Model\UpdateBidPercentageRequest $update_bid_percentage_request This type defines the fields for the updateBid request. (required)
     *
     * @throws \EbayMarketingApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateBid($ad_id, $campaign_id, $update_bid_percentage_request)
    {
        $this->updateBidWithHttpInfo($ad_id, $campaign_id, $update_bid_percentage_request);
    }

    /**
     * Operation updateBidWithHttpInfo
     *
     * @param  string $ad_id A unique eBay-assigned ID for an ad that&#39;s generated when an ad is created. (required)
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     * @param  \EbayMarketingApi\Model\UpdateBidPercentageRequest $update_bid_percentage_request This type defines the fields for the updateBid request. (required)
     *
     * @throws \EbayMarketingApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateBidWithHttpInfo($ad_id, $campaign_id, $update_bid_percentage_request)
    {
        $request = $this->updateBidRequest($ad_id, $campaign_id, $update_bid_percentage_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation updateBidAsync
     *
     * 
     *
     * @param  string $ad_id A unique eBay-assigned ID for an ad that&#39;s generated when an ad is created. (required)
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     * @param  \EbayMarketingApi\Model\UpdateBidPercentageRequest $update_bid_percentage_request This type defines the fields for the updateBid request. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateBidAsync($ad_id, $campaign_id, $update_bid_percentage_request)
    {
        return $this->updateBidAsyncWithHttpInfo($ad_id, $campaign_id, $update_bid_percentage_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateBidAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $ad_id A unique eBay-assigned ID for an ad that&#39;s generated when an ad is created. (required)
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     * @param  \EbayMarketingApi\Model\UpdateBidPercentageRequest $update_bid_percentage_request This type defines the fields for the updateBid request. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateBidAsyncWithHttpInfo($ad_id, $campaign_id, $update_bid_percentage_request)
    {
        $returnType = '';
        $request = $this->updateBidRequest($ad_id, $campaign_id, $update_bid_percentage_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateBid'
     *
     * @param  string $ad_id A unique eBay-assigned ID for an ad that&#39;s generated when an ad is created. (required)
     * @param  string $campaign_id A unique eBay-assigned ID for an ad campaign that&#39;s generated when a campaign is created. Get a seller&#39;s campaign IDs by calling getCampaigns. (required)
     * @param  \EbayMarketingApi\Model\UpdateBidPercentageRequest $update_bid_percentage_request This type defines the fields for the updateBid request. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateBidRequest($ad_id, $campaign_id, $update_bid_percentage_request)
    {
        // verify the required parameter 'ad_id' is set
        if ($ad_id === null || (is_array($ad_id) && count($ad_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ad_id when calling updateBid'
            );
        }
        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling updateBid'
            );
        }
        // verify the required parameter 'update_bid_percentage_request' is set
        if ($update_bid_percentage_request === null || (is_array($update_bid_percentage_request) && count($update_bid_percentage_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_bid_percentage_request when calling updateBid'
            );
        }

        $resourcePath = '/ad_campaign/{campaign_id}/ad/{ad_id}/update_bid';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ad_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ad_id' . '}',
                ObjectSerializer::toPathValue($ad_id),
                $resourcePath
            );
        }
        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_id' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($update_bid_percentage_request)) {
            $_tempBody = $update_bid_percentage_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
